/* tslint:disable */
/* eslint-disable */
/**
 * step-python
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * AiApi - axios parameter creator
 * @export
 */
export const AiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Chat
         * @param {string} message 
         * @param {string} xUserID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatAiChatPost: async (message: string, xUserID: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'message' is not null or undefined
            assertParamExists('chatAiChatPost', 'message', message)
            // verify required parameter 'xUserID' is not null or undefined
            assertParamExists('chatAiChatPost', 'xUserID', xUserID)
            const localVarPath = `/ai/chat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }


    
            if (xUserID != null) {
                localVarHeaderParameter['X-User-ID'] = String(xUserID);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AiApi - functional programming interface
 * @export
 */
export const AiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Chat
         * @param {string} message 
         * @param {string} xUserID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chatAiChatPost(message: string, xUserID: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.chatAiChatPost(message, xUserID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AiApi.chatAiChatPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AiApi - factory interface
 * @export
 */
export const AiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AiApiFp(configuration)
    return {
        /**
         * 
         * @summary Chat
         * @param {string} message 
         * @param {string} xUserID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chatAiChatPost(message: string, xUserID: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.chatAiChatPost(message, xUserID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AiApi - object-oriented interface
 * @export
 * @class AiApi
 * @extends {BaseAPI}
 */
export class AiApi extends BaseAPI {
    /**
     * 
     * @summary Chat
     * @param {string} message 
     * @param {string} xUserID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AiApi
     */
    public chatAiChatPost(message: string, xUserID: string, options?: RawAxiosRequestConfig) {
        return AiApiFp(this.configuration).chatAiChatPost(message, xUserID, options).then((request) => request(this.axios, this.basePath));
    }
}



